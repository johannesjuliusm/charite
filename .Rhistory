print_ascii <- function(path = "~/Desktop/ascii-art.txt") {
lines <- readLines(path, warn = FALSE)
cat(paste(lines, collapse = "\n"))
}
print-ascii
print_ascii()
print_ascii <- function(path = "~/Desktop/ascii-art.txt") {
lines <- readLines(path, warn = FALSE)
cat(paste(lines, collapse = "\n"))
}
print_ascii()
virchow <- function() {
cat("
░░░░
░░█░░  ░░ ░░░ ░█ ░░
░░  ░█░░░   ░░░░░█░░
░░░░░░░              ░░░
░▒░░░                    ░█
░░    ░░░                  ░█░
░░░   ░░       ░░  ░░      ░  ░
█░ ░░░░█░    ░░░ ░░▓█░  ░▓██▓░
█░░░░░░░░           ░░  ░░░ ░░
░░░░░░░█▒█████░░░░░██▓░█ █░██░▒░
░▓ ░█░░█       ░█▓  █   ░▓███░░
░ █░░ ▒ ░ ▒         ░     ░   █░
▓░░█░▓░█  ░         ░░░░  █  ░
░█░   ▒  ▒░     ░█░░  ░░░ ██░
░  ██░  ░░░ ░ █  ░       ░█░░
░░█░   ░██  ░ ▒▓░████░  ░█
██ ▓     ██ ▒░░      ░░  ░░
░ ░░  ██░░       ░░░ ░█░█░  █
░█░░█░░ ░░░      ░░▓░░░░░░░░░█
░░░   ░░█░ ░░█      ░░   ░░    █░
░ ░░ ▒▒░  ░       ░░░  █  ░          ░░░░
▓▒▒░░      ░        ░█░ ░█░▒▓ ░   ░░▒░▓░░
░░         ░░█░░░░ ░░░▒░░█░ ░░█▒░░
░            ░█░░█░ ░█  ░█░ ░▒░░░░░░░█▒░
░█░            ░░░█████  ░░░   ░░      ░█░
█░░░ ░░░ ░░  ░█░░░ ░░█ ░░░   ▒░       ░▒░
░ █     ░█░▒  ░  ░▒█ ░▒          ░█
░       ░█░     ░░█  █░          █
█        ░█    ░  ░░  ░░░█░      ▓
█         ░      ░░█     ░░
")
}
virchow()
virchow <- function() {
cat("
░░░░
░░█░░  ░░ ░░░ ░█ ░░
░░  ░█░░░   ░░░░░█░░
░░░░░░░              ░░░
░▒░░░                    ░█
░░    ░░░                  ░█░
░░░   ░░       ░░  ░░      ░  ░
█░ ░░░░█░    ░░░ ░░▓█░  ░▓██▓░
█░░░░░░░░           ░░  ░░░ ░░
░░░░░░░█▒█████░░░░░██▓░█ █░██░▒░
░▓ ░█░░█       ░█▓  █   ░▓███░░
░ █░░ ▒ ░ ▒         ░     ░   █░
▓░░█░▓░█  ░         ░░░░  █  ░
░█░   ▒  ▒░     ░█░░  ░░░ ██░
░  ██░  ░░░ ░ █  ░       ░█░░
░░█░   ░██  ░ ▒▓░████░  ░█
██ ▓     ██ ▒░░      ░░  ░░
░ ░░  ██░░       ░░░ ░█░█░  █
░█░░█░░ ░░░      ░░▓░░░░░░░░░█
░░░   ░░█░ ░░█      ░░   ░░    █░
░ ░░ ▒▒░  ░       ░░░  █  ░          ░░░░
▓▒▒░░      ░        ░█░ ░█░▒▓ ░   ░░▒░▓░░
░░         ░░█░░░░ ░░░▒░░█░ ░░█▒░░
░            ░█░░█░ ░█  ░█░ ░▒░░░░░░░█▒░
░█░            ░░░█████  ░░░   ░░      ░█░
█░░░ ░░░ ░░  ░█░░░ ░░█ ░░░   ▒░       ░▒░
░ █     ░█░▒  ░  ░▒█ ░▒          ░█
░       ░█░     ░░█  █░          █
█        ░█    ░  ░░  ░░░█░      ▓
█         ░      ░░█     ░░
")
}
path2source   <- "/Users/jjm/sci/R/source/"
source("~/sci/R/charite/virchow.R")
virchow()
theme_charite <- function(base_size = 10, use_calibri = FALSE, thickness = 0.5, grid = FALSE) {
font_family <- if (use_helvetica) "Calibri" else "Arial"
base_theme <- theme_classic(base_size = base_size, base_family = font_family) %+replace%
theme(
plot.title = element_text(
color = "black",
size = rel(1),
hjust = 0.5,
margin = margin(t = 0, b = (2 + base_size + base_size / 2))
),
plot.subtitle = element_text(
color = "black",
size = rel(1),
hjust = 0.5,
margin = margin(t = -(2 + base_size), b = (2 + base_size + base_size / 2))
),
plot.caption = element_text(
color = "black",
size = rel(1),
hjust = 1,
margin = margin(t = base_size / 2, unit = "pt")
),
axis.title.x = element_text(
color = "black",
size = rel(1),
margin = margin(t = base_size / 2, unit = "pt")
),
axis.title.y = element_text(
angle = 90,
color = "black",
size = rel(1),
margin = margin(r = base_size / 2, unit = "pt")
),
axis.text = element_text(
size = rel(1)
),
axis.text.x = element_text(
color = "black",
margin = margin(t = 2, b = 0, unit = "pt")
),
axis.text.y = element_text(
color = "black",
margin = margin(r = 2, l = 0, unit = "pt")
),
axis.ticks = element_line(
color = "black",
linewidth = thickness
),
axis.ticks.length = unit(2, "pt"),
axis.line = element_line(
color = "black",
linewidth = thickness,
lineend = "square"
),
plot.margin = margin(t = 5, r = 35, b = 5, l = 5)
)
# add grid lines conditionally
if (grid) {
base_theme <- base_theme + theme(
panel.grid.major = element_line(color = "gray80"),
panel.grid.minor = element_line(color = "gray90")
)
} else {
base_theme <- base_theme + theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
}
return(base_theme)
}
dummy <- read.csv(paste0(path2source, "data.csv"))
dummy$outcome <- dummy$outcome*100
source(paste0("~/sci/R/charite/theme_charite.R"))
p <- ggplot(dummy, aes(x = predictor, y = outcome)) +
geom_point(
pch = 21
) +
labs(x = "The x axis Text",
y = "Y outcome [%]",
title = "Variable"
) +
scale_x_continuous(expand = c(0,0), limits = c(0,12)) +
scale_y_continuous(expand = c(0,0), limits = c(0,1200)) +
theme_sci(use_helvetica = FALSE, base_size = 12, thickness = 0.5, grid = FALSE) +
theme(aspect.ratio = 1,
plot.background = element_rect(color = "red"))
library(ggplot2)
dummy <- read.csv(paste0(path2source, "data.csv"))
dummy$outcome <- dummy$outcome*100
source(paste0("~/sci/R/charite/theme_charite.R"))
p <- ggplot(dummy, aes(x = predictor, y = outcome)) +
geom_point(
pch = 21
) +
labs(x = "The x axis Text",
y = "Y outcome [%]",
title = "Variable"
) +
scale_x_continuous(expand = c(0,0), limits = c(0,12)) +
scale_y_continuous(expand = c(0,0), limits = c(0,1200)) +
theme_sci(use_helvetica = FALSE, base_size = 12, thickness = 0.5, grid = FALSE) +
theme(aspect.ratio = 1,
plot.background = element_rect(color = "red"))
dummy <- read.csv(paste0(path2source, "data.csv"))
dummy$outcome <- dummy$outcome*100
source(paste0("~/sci/R/charite/theme_charite.R"))
p <- ggplot(dummy, aes(x = predictor, y = outcome)) +
geom_point(
pch = 21
) +
labs(x = "The x axis Text",
y = "Y outcome [%]",
title = "Variable"
) +
scale_x_continuous(expand = c(0,0), limits = c(0,12)) +
scale_y_continuous(expand = c(0,0), limits = c(0,1200)) +
theme_charite(use_helvetica = FALSE, base_size = 12, thickness = 0.5, grid = FALSE) +
theme(aspect.ratio = 1,
plot.background = element_rect(color = "red"))
dummy <- read.csv(paste0(path2source, "data.csv"))
dummy$outcome <- dummy$outcome*100
source(paste0("~/sci/R/charite/theme_charite.R"))
p <- ggplot(dummy, aes(x = predictor, y = outcome)) +
geom_point(
pch = 21
) +
labs(x = "The x axis Text",
y = "Y outcome [%]",
title = "Variable"
) +
scale_x_continuous(expand = c(0,0), limits = c(0,12)) +
scale_y_continuous(expand = c(0,0), limits = c(0,1200)) +
theme_charite(use_calibri = FALSE, base_size = 12, thickness = 0.5, grid = FALSE) +
theme(aspect.ratio = 1,
plot.background = element_rect(color = "red"))
p
dummy <- read.csv(paste0(path2source, "data.csv"))
dummy$outcome <- dummy$outcome*100
source(paste0("~/sci/R/charite/theme_charite.R"))
p <- ggplot(dummy, aes(x = predictor, y = outcome)) +
geom_point(
pch = 21
) +
labs(x = "The x axis Text",
y = "Y outcome [%]",
title = "Variable"
) +
scale_x_continuous(expand = c(0,0), limits = c(0,12)) +
scale_y_continuous(expand = c(0,0), limits = c(0,1200)) +
theme_charite(use_calibri = TRUE, base_size = 12, thickness = 0.5, grid = FALSE) +
theme(aspect.ratio = 1,
plot.background = element_rect(color = "red"))
p
warnings()
systemfonts::system_fonts()
names(pdfFonts())
install.packages("showtext")
library(showtext)
library(showtext)
font_add("Calibri", regular = "Calibri.ttf")
theme_charite <- function(base_size = 10, use_calibri = FALSE, thickness = 0.5, grid = FALSE) {
font_family <- if (use_calibri) "Calibri" else "Arial"
base_theme <- theme_classic(base_size = base_size, base_family = font_family) %+replace%
theme(
plot.title = element_text(
color = "#004d9b",
size = rel(1),
hjust = 0.5,
margin = margin(t = 0, b = (2 + base_size + base_size / 2))
),
plot.subtitle = element_text(
color = "#5e676c",
size = rel(1),
hjust = 0.5,
margin = margin(t = -(2 + base_size), b = (2 + base_size + base_size / 2))
),
plot.caption = element_text(
color = "#5e676c",
size = rel(1),
hjust = 1,
margin = margin(t = base_size / 2, unit = "pt")
),
axis.title.x = element_text(
color = "#5e676c",
size = rel(1),
margin = margin(t = base_size / 2, unit = "pt")
),
axis.title.y = element_text(
angle = 90,
color = "#5e676c",
size = rel(1),
margin = margin(r = base_size / 2, unit = "pt")
),
axis.text = element_text(
size = rel(1)
),
axis.text.x = element_text(
color = "#5e676c",
margin = margin(t = 2, b = 0, unit = "pt")
),
axis.text.y = element_text(
color = "#5e676c",
margin = margin(r = 2, l = 0, unit = "pt")
),
axis.ticks = element_line(
color = "black",
linewidth = thickness
),
axis.ticks.length = unit(2, "pt"),
axis.line = element_line(
color = "black",
linewidth = thickness,
lineend = "square"
),
plot.margin = margin(t = 5, r = 35, b = 5, l = 5)
)
# add grid lines conditionally
if (grid) {
base_theme <- base_theme + theme(
panel.grid.major = element_line(color = "#cbcfd2"),
panel.grid.minor = element_line(color = "#cbcfd2")
)
} else {
base_theme <- base_theme + theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
}
return(base_theme)
}
dummy <- read.csv(paste0(path2source, "data.csv"))
dummy$outcome <- dummy$outcome*100
source(paste0("~/sci/R/charite/theme_charite.R"))
p <- ggplot(dummy, aes(x = predictor, y = outcome)) +
geom_point(
pch = 21
) +
labs(x = "The x axis Text",
y = "Y outcome [%]",
title = "Variable"
) +
scale_x_continuous(expand = c(0,0), limits = c(0,12)) +
scale_y_continuous(expand = c(0,0), limits = c(0,1200)) +
theme_charite(use_calibri = TRUE, base_size = 12, thickness = 0.5, grid = FALSE) +
theme(aspect.ratio = 1,
plot.background = element_rect(color = "red"))
p
dummy <- read.csv(paste0(path2source, "data.csv"))
dummy$outcome <- dummy$outcome*100
source(paste0("~/sci/R/charite/theme_charite.R"))
p <- ggplot(dummy, aes(x = predictor, y = outcome)) +
geom_point(
pch = 21
) +
labs(x = "The x axis Text",
y = "Y outcome [%]",
title = "Variable"
) +
scale_x_continuous(expand = c(0,0), limits = c(0,12)) +
scale_y_continuous(expand = c(0,0), limits = c(0,1200)) +
theme_charite(use_calibri = FALSE, base_size = 12, thickness = 0.5, grid = FALSE) +
theme(aspect.ratio = 1,
plot.background = element_rect(color = "red"))
p
dummy <- read.csv(paste0(path2source, "data.csv"))
dummy$outcome <- dummy$outcome*100
source(paste0("~/sci/R/charite/theme_charite.R"))
p <- ggplot(dummy, aes(x = predictor, y = outcome)) +
geom_point(
pch = 21
) +
labs(x = "The x axis Text",
y = "Y outcome [%]",
title = "Variable"
) +
scale_x_continuous(expand = c(0,0), limits = c(0,12)) +
scale_y_continuous(expand = c(0,0), limits = c(0,1200)) +
theme_charite(use_calibri = FALSE, base_size = 12, thickness = 0.5, grid = FALSE) +
theme(aspect.ratio = 1,
plot.background = element_rect(color = "red"))
p
source(paste0("~/sci/R/charite/theme_charite.R"))
p <- ggplot(dummy, aes(x = predictor, y = outcome)) +
geom_point(
pch = 21
) +
labs(x = "The x axis Text",
y = "Y outcome [%]",
title = "Variable"
) +
scale_x_continuous(expand = c(0,0), limits = c(0,12)) +
scale_y_continuous(expand = c(0,0), limits = c(0,1200)) +
theme_charite(use_calibri = FALSE, base_size = 12, thickness = 0.5, grid = FALSE) +
theme(aspect.ratio = 1,
plot.background = element_rect(color = "red"))
p
source(paste0("~/sci/R/charite/theme_charite.R"))
p <- ggplot(dummy, aes(x = predictor, y = outcome)) +
geom_point(
pch = 21
) +
labs(x = "The x axis Text",
y = "Y outcome [%]",
title = "Variable",
subtitle = "Charité"
) +
scale_x_continuous(expand = c(0,0), limits = c(0,12)) +
scale_y_continuous(expand = c(0,0), limits = c(0,1200)) +
theme_charite(use_calibri = FALSE, base_size = 12, thickness = 0.5, grid = FALSE) +
theme(aspect.ratio = 1,
plot.background = element_rect(color = "red"))
p
source(paste0("~/sci/R/charite/theme_charite.R"))
p <- ggplot(dummy, aes(x = predictor, y = outcome)) +
geom_point(
pch = 21
) +
labs(x = "The x axis Text",
y = "Y outcome [%]",
title = "Variable",
subtitle = "Charité"
) +
scale_x_continuous(expand = c(0,0), limits = c(0,12)) +
scale_y_continuous(expand = c(0,0), limits = c(0,1200)) +
theme_charite(use_calibri = FALSE, base_size = 12, thickness = 0.5, grid = TRUE) +
theme(aspect.ratio = 1,
plot.background = element_rect(color = "red"))
p
source(paste0("~/sci/R/charite/theme_charite.R"))
p <- ggplot(dummy, aes(x = predictor, y = outcome)) +
geom_point(
pch = 21
) +
labs(x = "The x axis Text",
y = "Y outcome [%]",
title = "Variable",
subtitle = "Charité"
) +
scale_x_continuous(expand = c(0,0), limits = c(0,12)) +
scale_y_continuous(expand = c(0,0), limits = c(0,1200)) +
theme_charite(use_calibri = FALSE, base_size = 12, thickness = 0.5, grid = TRUE) +
theme(aspect.ratio = 1,
plot.background = element_rect(color = "red"))
p
install.packages("roxygen2")
library(roxygen2)
#' Custom ggplot2 Theme for Charité - Universitätsmedizin Berlin by Johannes Julius Mohn
#'
#' This function creates a custom ggplot2 theme with customizable options for font, line thickness, and grid.
#' You can optionally choose to plot text in Calibri font if available on your OS.
#' Calibri is the standard font on Windows and recommended by Charité. On macOS and Linux, you may need to
#' manually install the font first.
#'
#' @param base_size Base font size in points, i.e., same as in your text editor.
#' @param thickness Line thickness for axes. Default ggplot2 setting is 0.5.
#' @param grid Logical; if TRUE, grid lines are added.
#' @param use_calibri Use Calibri font? Defaults to FALSE.
#'
#' @return A ggplot2 theme by Johannes Julius Mohn for Charité - Universitätsmedizin Berlin.
#' @export
theme_charite <- function(base_size = 10, thickness = 0.5, grid = FALSE, use_calibri = FALSE, ) {
View(virchow)
roxygen2::document()
library(roxygen2)
roxygen2::document()
library(devtools)
devtools::document()
setwd("/Users/jjm/sci/R/charite/")
getwd
devtools::document()
setwd("/Users/jjm/sci/R/charite/R/")
devtools::document()
getwd
getwd()
setwd("/Users/jjm/sci/R/charite")
devtools::document()
warnings()
devtools::document()
rm(list = c("theme_charite", "virchow"))
# housekeeping
cat("\014") # clear console
rm(list=ls()) # clear environment
# options
knitr::opts_chunk$set(
warning = FALSE,
message = FALSE,
echo    = TRUE)
# scientific number format
options(scipen = 6, digits = 5)
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
virchow()
?theme_charite
devtools::document()
devtool::loadAll()
devtools::load_all()
?virchow()
?colors_charite()
?theme_charite()
devtools::document
devtools::document()
devtools::load_all()
devtools::install()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
tools::checkDescription("/Users/jjm/sci/R/charite/DESCRIPTION")
devtools::checkDescription("/Users/jjm/sci/R/charite/DESCRIPTION")
devtools::check()
devtools::document
devtools::document()
devtools::check()
devtools::check()
readLines("/Users/jjm/sci/R/charite/DESCRIPTION", warn = FALSE)
readLines("/Users/jjm/sci/R/charite/DESCRIPTION", warn = FALSE)
devtools::check()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::load_all()
virchow()
devtools::build()
devtools::install()
library(charite)
